<?xml version="1.0"?>

<launch>

  <!-- Default values for arguments -->
  <arg name="master_ip" value="10.0.0.1" />
  <arg name="laser1_sensor_ip" value="10.0.0.5" />
  <arg name="laser1_prefix" value="laser_1" />
  <arg name="joy_config" value="xbox" />
  <arg name="nav_mode" value="localization" />
  <arg name="mapping_algo" value="hector" />
  <arg name="localization_algo" value="amcl" />
  
  <!-- SWD ROS Controllers (diff-drive) -->
  <include file="$(find swd_ros_controllers)/launch/swd_diff_drive_controller.launch"/>

  <!-- PILZ -->
  <!--
  <include file="$(find psen_scan_v2)/launch/psen_scan_v2.launch">
    <arg name="rviz" value="false" />
    <arg name="sensor_ip" value="$(arg laser1_sensor_ip)" />
    <arg name="tf_prefix" value="$(arg laser1_prefix)" />
  </include>

  <node pkg="tf" type="static_transform_publisher" name="laser_broadcaster" args="0 0 0 0 0 0 base_link laser_1_mount_link 100"/>
  -->
  <!-- /PILZ -->

  <!-- IDEC -->
  <node pkg="urg_node" name="urg_node" type="urg_node">
    <param name="ip_address" value="$(arg laser1_sensor_ip)" />
    <param name="frame_id" value="$(arg laser1_prefix)" />

    <!-- Remap topic names, /scan_idec is the raw data -->
    <remap from="/scan" to="/scan_idec" />
  </node>

  <node pkg="tf" type="static_transform_publisher" name="laser_broadcaster" args="0.04 0 0 0 0 0 base_link laser_1 100" />
  <!-- /IDEC -->

  <!-- Filter LiDAR ranges -->
  <include file="$(dirname)/laser_filter.launch"/>

  <!--
      Load launch files of different navigation modes
      Currently, we supports two main modes:
      - mapping: A mode for creating new maps for unknown environments.
        This mode supports two algotithms (mapping_algo argument):
        - lama: to uses the IRIS LAMA SLAM
        - hector: to use hector_mapping

      - localization: A mode which provides localization for a robot in a known map.
        This mode supports the following algorithms (localization_algo argument):
        - amcl: to use the Adaptive Monte Carlo Localization (AMCL)
  -->
  <group if="$(eval arg('nav_mode') == 'mapping')">
    <group if="$(eval arg('mapping_algo') == 'hector')">
      <include file="$(dirname)/mapping_hector.launch"/>
    </group>

    <group if="$(eval arg('mapping_algo') == 'lama')">
      <include file="$(dirname)/mapping_lama.launch"/>
    </group>
  </group>

  <group if="$(eval arg('nav_mode') == 'localization')">
    <group if="$(eval arg('localization_algo') == 'amcl')">
      <include file="$(dirname)/localization_amcl.launch"/>

      <node pkg="map_server" name="map_server" type="map_server" args="$(find swd_starter_kit_bringup)/assets/map_box2_v2.yaml">
        <param name="frame_id" value="map" />
      </node>
    </group>
  </group>

  <!-- Websocket bridge (for HMI) -->
  <node pkg="rosbridge_server" name="rosbridge_websocket" type="rosbridge_websocket">
    <param name="address" value="$(arg master_ip)" />
    <param name="use_compression" value="true" />
  </node>

  <node pkg="tf2_web_republisher" name="tf2_web_republisher" type="tf2_web_republisher" />

  <!-- Joystick + teleop -->
  <node pkg="joy" name="xbox_joystick" type="joy_node">
    <param name="autorepeat_rate" value="50" />
  </node>

  <node pkg="teleop_twist_joy" name="teleop_twist_joy"
  type="teleop_node">
    <param name="joy_config" value="$(arg joy_config)" />
    <param name="enable_button" value="5" />
    <param name="enable_turbo_button" value="6" />
    <param name="axis_linear" value="1" />
    <param name="axis_angular" value="3" />
    <param name="scale_linear" value="1.0" />
    <param name="scale_angular" value="0.7" />
    <param name="scale_linear_turbo" value="1.3" />
    <param name="scale_angular_turbo" value="1.4" />
    <remap from="/cmd_vel" to="/joy_vel" />
  </node>

  <node pkg="topic_tools" name="mux_cmd_vel" type="mux"
        args="/swd_diff_drive_controller/cmd_vel /key_vel /nav_vel /joy_vel /remote_vel" >
    <param name="mux" value="mux_cmd_vel" />
  </node>

  <!-- Robot manager -->
  <node pkg="swd_robot_manager" name="robot_manager" type="robot_manager" />

  <!-- Republish Pose from TF tree -->
  <node pkg="swd_robot_manager" name="pose_from_tf" type="pose_from_tf" />

  <!-- Robot state publisher, using the URDF model -->
  <!--
  <node name="robot_state_publisher" pkg="robot_state_publisher"
        type="robot_state_publisher" >
    <param name="robot_description" textfile="$(find swd_starter_kit_description)/urdf/swd_starter_kit.urdf" />
  </node>
  -->

</launch>
